// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(uuid())
  role            Role              @default(MEMBER)
  name            String
  email           String            @unique
  status          Status            @default(PENDING)
  password        String
  address         String?
  idCardPhoto     String?
  ActivityProgram ActivityProgram[]
  News            News[]
  ImageProfile    String?
  programType     ProgramType?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Session         Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model OrganizationStructure {
  id       String               @id @default(uuid())
  name     String
  position OrganizationPosition @default(STAFF)
  mediaUrl String?
  order    Int?

  @@map("organizationStructures")
}

model News {
  id          String      @id @default(uuid())
  title       String
  subtitle    String?
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  MediaNews   MediaNews[]

  @@map("news")
}

model MediaNews {
  id       String  @id @default(uuid())
  mediaUrl String
  type     String?
  format   String?
  size     Int?
  order    Int?
  news     News    @relation(fields: [newsId], references: [id])
  newsId   String
}

model ActivityProgram {
  id            String          @id @default(uuid())
  title         String
  description   String
  time          DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
  status        Status          @default(PENDING)
  MediaActivity MediaActivity[]

  @@map("activityPrograms")
}

model MediaActivity {
  id                String          @id @default(uuid())
  mediaUrl          String
  type              String?
  format            String?
  size              Int?
  order             Int?
  activityProgram   ActivityProgram @relation(fields: [activityProgramId], references: [id])
  activityProgramId String
}

enum Role {
  ADMIN
  MEMBER
}

enum ProgramType {
  MARKETING
  OPERASIONAL
  KEUANGAN
}

enum OrganizationPosition {
  MANAGER
  STAFF
}

enum Status {
  CANCELED
  PENDING
  CONFIRMED
}
